@page "/Excel"
@rendermode InteractiveServer

@layout MainLayoutInterno

@using Blazorise
@using Entidades
@using OfficeOpenXml;
@using System.Data;
@using System.IO;
@using ArrendaVisit.Components.Layout
@using ArrendaVisit.Service
@using System.Globalization;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using Extensiones
@using ClosedXML.Excel;
@using Radzen
@using Radzen.Blazor

@inject IJSRuntime _jsServicio
@inject NavigationManager NavigationManager
@inject IlistaServicio ListaServicio
@inject IgrabarClienteServicio grabarClienteServicio
@inject NavigationManager Navigation
@inject TooltipService tooltipService



@* @attribute [Authorize] *@

@* <AuthorizeView> *@

    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Reporte de citas</title>
        <style>
            body {
                font-family: Arial, sans-serif; /* Ajusta la fuente según tus preferencias */
                background-color: #222936; /* Color de fondo */
                color: #333; /* Color de texto principal */
                margin: 0;
                padding: 0;
            }

            .container {
                max-width: max-content;
                margin: 20px auto;
                padding: 20px;
                background-color: #fff; /* Fondo del contenido */
                border: 1px solid #ddd; /* Borde alrededor del contenido */
                border-radius: 5px;
            }

            .card-body {
                padding: 20px;
            }

            .table-wrapper {
                max-height: 265px;
                overflow: auto;
            }

            .btn-primary {
                background-color: orange; /* Color de fondo del botón primario */
                color: white; /* Color de texto del botón primario */
            }

            .btn-secondary {
                background-color: orange; /* Color de fondo del botón secundario */
                color: white; /* Color de texto del botón secundario */
            }

        footer {
            text-align: center;
            margin-top: 20px;
            padding: 5px 0; /* Espacio interior del footer */
            background-color: #222936; /* Fondo opcional */
            color: white; /* Color del texto del footer */
        }
        </style>
    </head>
    <body>
        <div class="card">
            <div class="card-body">

            <br />
            <div class="text-center">
                <img width="400" height="400" src="~/AgenciaArriendo.png" class="img-responsive img-rounded img-thumbnail" alt="https://www.arrendavisit.com.co" style="border:none">
            </div>
            <br />

                <fieldset class="border p-2">
                    <legend class="float-none w-auto p-2">
                    <font color="#222936" size="2">
                            <b>CONSULTA ESTADO DE CITAS</b>
                        </font>
                    </legend>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="col-md-12 mb-3">
                                <label><font color="red">(*)</font> Seleccione fecha inicial</label>
                                <DatePicker onchange="@ValidarFechaInicial" TValue="DateTime?" placeholder="YYYY/MM/DD" required />
                                <span>Formato: YYYY/MM/DD</span>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="col-md-12 mb-3">
                                <label><font color="red">(*)</font> Seleccione fecha final</label>
                                <DatePicker onchange="@ValidarFechaFinal" TValue="DateTime?" placeholder="YYYY/MM/DD" required />
                                <span>Formato: YYYY/MM/DD</span>
                            </div>
                        </div>
                    </div>

                    <div class="row justify-content-center">
                        <div class="col">
                            <RadzenButton Click="@(args => ExportarExcel())" data-toggle="tooltip" title="Esta opción te permite exportar a Excel!" class="btn btn-primary" style="background: orange;" Text="Exportar Excel" />
@*                             <RadzenButton Click="@(args => Cerrar())" data-toggle="tooltip" title="Esta opción te permite regresar" class="btn btn-secondary" style="background: orange;" Text="Retornar" /> *@
                        </div>
                    </div>

                </fieldset>
            </div>
        </div>

    <footer>
        @{
            var año = @DateTime.Now.Year;
        }
        &copy; @año Todos los derechos reservados | Agencia Arriendo Medellin y cercanias
    </footer>
    </body>
</html>

<Modal @ref="modalvalidacion">
    <ModalContent Size="ModalSize.Large" Centered="true" Scrollable="true">
        <ModalHeader>
            <ModalTitle>
                Validacion del sistema
            </ModalTitle>
        </ModalHeader>
        <ModalBody>
            <br />
            <p>
                El rango de fechas no arroja datos para la consulta.
            </p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CerrarModal">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@* </AuthorizeView> *@
@* <button class="btn btn-success mt-4" @onclick="ExportarExcel">Descargar Excel</button> *@

@code {

    private Modal? modalvalidacion = null!;
    List<ModelsRptServicios>? ModelsRptServicio;
    string FechaInicial = string.Empty;
    string FechaFinal = string.Empty;

    private async void Cerrar()
    {
        NavigationManager.NavigateTo("/Home", true);
    }

    public async Task ValidarFechaInicial(ChangeEventArgs? e)
    {

        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            byte dia = (byte)Convert.ToDateTime(e.Value).DayOfWeek;

            var yearcontrol = Convert.ToDateTime(e.Value).Year;
            var monthcontrol = Convert.ToDateTime(e.Value).Month;
            var daycontrol = Convert.ToDateTime(e.Value).Day;

            var fechacontrol = yearcontrol + "/" + monthcontrol.ToString().PadLeft(2, '0') + "/" + daycontrol.ToString().PadLeft(2, '0');
            FechaInicial = fechacontrol;

            var yearsystem = DateTime.Today.Year;
            var monthsystem = DateTime.Today.Month;
            var daysystem = DateTime.Today.Day;

            var fechasistema = yearsystem + "/" + monthsystem.ToString().PadLeft(2, '0') + "/" + daysystem.ToString().PadLeft(2, '0');

        }
        else
        {
            modalvalidacion.Show();
        }
    }

    public async Task ValidarFechaFinal(ChangeEventArgs? e)
    {

        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            byte dia = (byte)Convert.ToDateTime(e.Value).DayOfWeek;

            var yearcontrol = Convert.ToDateTime(e.Value).Year;
            var monthcontrol = Convert.ToDateTime(e.Value).Month;
            var daycontrol = Convert.ToDateTime(e.Value).Day;

            var fechacontrol = yearcontrol + "/" + monthcontrol.ToString().PadLeft(2, '0') + "/" + daycontrol.ToString().PadLeft(2, '0');
            FechaFinal = fechacontrol;

            var yearsystem = DateTime.Today.Year;
            var monthsystem = DateTime.Today.Month;
            var daysystem = DateTime.Today.Day;

            var fechasistema = yearsystem + "/" + monthsystem.ToString().PadLeft(2, '0') + "/" + daysystem.ToString().PadLeft(2, '0');

        }
        else
        {
            modalvalidacion.Show();
        }
    }

    private void CerrarModal()
    {
        modalvalidacion.Hide();

    }

    private async Task ExportarExcel()
    {
        string format = "yyyy/MM/dd";

        try
        {
            if (@FechaInicial != string.Empty && @FechaFinal != string.Empty)
            {
                if (DateTime.ParseExact(@FechaInicial, format, CultureInfo.InvariantCulture) <= DateTime.ParseExact(@FechaFinal, format, CultureInfo.InvariantCulture))
                {
                    ModelsRptServicio = (await ListaServicio.GetServiciosIncumplidos(new ModelsObjRptServicio() { FechaIni = @FechaInicial, FechaFin = @FechaFinal })).ToList();

                    if ((ModelsRptServicio != null && ModelsRptServicio.Count>0))
                    {
                        using (var libro = new XLWorkbook())
                        {
                            IXLWorksheet hoja = libro.Worksheets.Add("CITAS");

                            hoja.Cell(1, 1).Value = "Nombre_Asesor";
                            hoja.Cell(1, 2).Value = "Horario_Reserva";
                            hoja.Cell(1, 3).Value = "Fecha_Reserva";
                            hoja.Cell(1, 4).Value = "Nit_Cliente";
                            hoja.Cell(1, 5).Value = "Cliente";
                            hoja.Cell(1, 6).Value = "Apartamento_Visita";
                            hoja.Cell(1, 7).Value = "Hora_Reserva";
                            hoja.Cell(1, 8).Value = "Fecha_Atencion";
                            hoja.Cell(1, 9).Value = "Hora_Atencion";
                            hoja.Cell(1, 10).Value = "Codigo_Reserva";
                            hoja.Cell(1, 11).Value = "Observacion";
                            hoja.Cell(1, 12).Value = "Estado_Atencion";

                            //***********************************************************************/
                            int row = 2;
                            foreach (var datos in ModelsRptServicio)
                            {
                                hoja.Cell(row, 1).Value = datos.strnombreasesor;
                                hoja.Cell(row, 2).Value = datos.HORARIORESERVADO;

                                hoja.Cell(row, 3).Value = datos.strfechareserva;
                                hoja.Cell(row, 4).Value = datos.strcedulacliente;

                                hoja.Cell(row, 5).Value = datos.CLIENTE;
                                hoja.Cell(row, 6).Value = datos.strapartamentovisita;

                                hoja.Cell(row, 7).Value = datos.strhorareserva;
                                hoja.Cell(row, 8).Value = datos.strfechavisita;

                                hoja.Cell(row, 9).Value = datos.horavisita;
                                hoja.Cell(row, 10).Value = datos.strcodigoreserva;

                                hoja.Cell(row, 11).Value = datos.strobservacion;
                                hoja.Cell(row, 12).Value = datos.ESTADOATENCION;

                                row++;
                            }

                            using (var memoria = new MemoryStream())
                            {
                                libro.SaveAs(memoria);
                                var nombreExcel = string.Concat("Reporte Citas ", DateTime.Now.ToString(), ".xlsx");

                                await _jsServicio.InvokeAsync<object>(
                                    "DescargarExcel",
                                    nombreExcel,
                                    Convert.ToBase64String(memoria.ToArray())
                                );
                            }

                        }
                    }
                    else
                    {
                        modalvalidacion.Show();
                    }
                }
                else
                {
                    modalvalidacion.Show();
                }
            }
            else
            {
                modalvalidacion.Show();
            }
        }
        catch (Exception e)
        {

            throw e;
        }
    }
}
